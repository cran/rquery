% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/order_by.R
\name{orderby}
\alias{orderby}
\title{Make an orderby node (not a relational operation).}
\usage{
orderby(source, orderby, ..., desc = FALSE, limit = NULL)
}
\arguments{
\item{source}{source to select from.}

\item{orderby}{order by column names.}

\item{...}{force later arguments to be bound by name}

\item{desc}{logical if TRUE reverse order}

\item{limit}{number limit row count.}
}
\value{
select columns node.
}
\description{
Order a table by a set of columns (not general expressions) and
limit number of rows in that order.
}
\details{
Note: this is a relational operator in that it takes a table that
is a relation (has unique rows) to a table that is still a relation.
However, most relational systems do not preserve row order in storage or between
operations.  So without the limit set this is not a useful operator except
as a last step prior ot pulling data to an in-memory \code{data.frame} (
which does preserve row order).
}
\examples{

my_db <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")
d <- dbi_copy_to(my_db, 'd',
                data.frame(AUC = 0.6, R2 = 0.2))
eqn <- orderby(d, "AUC", desc=TRUE, limit=4)
cat(format(eqn))
sql <- to_sql(eqn, my_db)
cat(sql)
DBI::dbGetQuery(my_db, sql)
DBI::dbDisconnect(my_db)

}
